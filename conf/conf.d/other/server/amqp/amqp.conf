location ~* ^/exchange_declare/([^/]+) {
  set $exchange $1;
  content_by_lua_block {
    local amqp = require "ngx_amqp"
    local ok, err = amqp.exchange_declare( { exchange    = ngx.var.exchange,
                                             typ         = ngx.var.arg_typ or "topic",
                                             durable     = ngx.var.arg_durable == nil and true or ngx.var.arg_durable,
                                             auto_delete = ngx.var.arg_auto_delete,
                                             passive     = ngx.var.arg_passive,
                                             internal    = ngx.var.arg_internal } )
    if ok then
      ngx.say("Declared")
    else
      ngx.say(err)
    end
  }
}

location ~* ^/queue_declare/([^/]+) {
  set $queue $1;
  content_by_lua_block {
    local amqp = require "ngx_amqp"
    local ok, err = amqp.queue_declare( { name        = ngx.var.queue,
                                          durable     = ngx.var.arg_durable == nil and true or ngx.var.arg_durable,
                                          auto_delete = ngx.var.arg_auto_delete,
                                          passive     = ngx.var.arg_passive } )
    if ok then
      ngx.say("Declared")
    else
      ngx.say(err)
    end
  }
}

location ~* ^/queue_bind/([^/]+) {
  set $queue $1;
  content_by_lua_block {
    local amqp = require "ngx_amqp"
    local ok, err = amqp.queue_bind( { queue       = ngx.var.queue,
                                       exchange    = ngx.var.arg_exchange,
                                       routing_key = ngx.var.arg_routing_key } )
    if ok then
      ngx.say("Bound")
    else
      ngx.say(err)
    end
  }
}

location ~* ^/queue_unbind/([^/]+) {
  set $queue $1;
  content_by_lua_block {
    local amqp = require "ngx_amqp"
    local ok, err = amqp.queue_unbind( { queue       = ngx.var.queue,
                                         exchange    = ngx.var.arg_exchange,
                                         routing_key = ngx.var.arg_routing_key } )
    if ok then
      ngx.say("Unbound")
    else
      ngx.say(err)
    end
  }
}

location ~* ^/exchange_bind {
  content_by_lua_block {
    local amqp = require "ngx_amqp"
    local ok, err = amqp.exchange_bind( { destination = ngx.var.arg_destination,
                                          source      = ngx.var.arg_source,
                                          routing_key = ngx.var.arg_routing_key } )
    if ok then
      ngx.say("Bound")
    else
      ngx.say(err)
    end
  }
}

location ~* ^/exchange_unbind {
  content_by_lua_block {
    local amqp = require "ngx_amqp"
    local ok, err = amqp.exchange_unbind( { destination = ngx.var.arg_destination,
                                            source      = ngx.var.arg_source,
                                            routing_key = ngx.var.arg_routing_key } )
    if ok then
      ngx.say("Unbound")
    else
      ngx.say(err)
    end
  }
}

location ~* ^/exchange_delete/([^/]+) {
  set $exchange $1;
  content_by_lua_block {
    local amqp = require "ngx_amqp"
    local ok, err = amqp.exchange_delete( { exchange  = ngx.var.exchange,
                                            if_unused = ngx.var.arg_if_unused == nil and true or ngx.var.arg_if_unused } )
    if ok then
      ngx.say("Deleted")
    else
      ngx.say(err)
    end
  }
}

location ~* ^/queue_delete/([^/]+) {
  set $queue $1;
  content_by_lua_block {
    local amqp = require "ngx_amqp"
    local ok, err = amqp.queue_delete( { queue     = ngx.var.queue,
                                         if_unused = ngx.var.arg_if_unused == nil and true or ngx.var.arg_if_unused,
                                         if_empty  = ngx.var.arg_if_empty == nil and true or ngx.var.arg_if_empty } )
    if ok then
      ngx.say("Deleted")
    else
      ngx.say(err)
    end
  }
}

# AMQP properties
# string content-type
# string content-encoding
# table  headers
# i8     delivery-mode
# i8     priority
# string correlation-id
# string reply-to
# string expiration
# string message-id
# ts     timestamp
# string type
# string user-id
# string app-id

location ~* ^/publish/([^/]+) {
  set $exchange $1;
  content_by_lua_block {
    local amqp = require "ngx_amqp"
    local cjson = require "cjson"

    local method = ngx.req.get_method()
    local message

    if method == "POST" or method == "PUT" then
      ngx.req.read_body()
      message = ngx.req.get_body_data()
    else
      message = ngx.var.arg_msg
    end

    local ok, err = amqp.publish( { exchange    = ngx.var.exchange,
                                    routing_key = ngx.var.arg_routing_key or "" },
                                  message,
                                  ngx.var.arg_async,
                                  amqp.get_properties() )
    if ok then
      ngx.say("Published")
    else
      ngx.say(err)
    end
  }
}

location = /info {
  default_type application/json;
  content_by_lua_block {
    local cjson = require "cjson"
    local amqp = require "ngx_amqp"
    ngx.say(cjson.encode(amqp.info()))
  }
}